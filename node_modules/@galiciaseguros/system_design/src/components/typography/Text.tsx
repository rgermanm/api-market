import React, { FC, HTMLAttributes } from "react";
import styles from './text.module.css'
export interface Props extends HTMLAttributes<HTMLParagraphElement> {
    /** Tipo de texto*/
    type?: 'S1' | 'S2' | 'S3' | 'S4' | 'S5' | 'S7' | 'S8',

    /** Alineacion del texto*/
    textAlign?: 'left' | 'right' | 'center',

    /** Variante de estilo del text type */
    variant?: 'web' | 'mobile'


    /** Contenido del texto*/
    text?: string;

    /** Bold */
    bold?: boolean;

    /**Italic */
    italic?: boolean;

    /**Indica si debe usarse etiqueta </a> */
    isLink?: boolean;

    /**Deja abierto un children para nextLink (TODO)*/
    nextLink?: Node;

    /**Href en caso de ser  link */
    href?: string;

    /**overline */
    overline?: boolean

    /**Color del texto */
    color?: string,

    dynamicClassName?: any,
    children?: React.ReactNode;

    isAction?: boolean,
}

export const Text: FC<Props> = ({ isAction=false, dynamicClassName, color, overline = false, isLink = false, type = "S5", textAlign = "left", bold = false, italic = false, text, href,children }: Props) => {


    const getStyledText = () => {

        if (overline) {
            return <p className={styles.Overline} style={getStyle()}>{text?.toUpperCase()}{children}</p>
        }
        switch (type) {
            case 'S1':
                return <h1 className={styles.S1} style={getStyle()}>{text}{children}</h1>
                break;
            case 'S2':
                return <h2 className={styles.S2} style={getStyle()}>{text}{children}</h2>
                break;
            case 'S3':
                return <h3 className={styles.S3} style={getStyle()}>{text}{children}</h3>
                break;
            case 'S4':
                return <h4 className={styles.S4} style={getStyle()}>{text}{children}</h4>
                break;
            case 'S5':
                if (isAction)
                    return <p className={`${styles.S5} ${styles.link} ${styles.action}`} style={getLinkStyle()}>{text}{children}</p>
                if (isLink)
                    return <a href={`${href}`} className={`${styles.S5} ${styles.link} ${styles.action}`} style={getLinkStyle()}>{text}{children}</a>
                /*  else if (nextLink)
                      console.log("TODO");*/
                else
                    return <p className={styles.S5} style={getStyle()}>{text}{children}</p>
                break;
            case 'S7':
                if (isAction)
                    return <p className={`${styles.S7} ${styles.link} ${styles.action}`} style={getLinkStyle()}>{text}{children}</p>

                if (isLink)
                    return <a href={`${href}`} className={`${styles.S7} ${styles.link}`} style={getLinkStyle()}>{text}{children}</a>
                /*  else if (nextLink)
             console.log("TODO");*/
                else
                    return <p className={styles.S7} style={getStyle()}>{text}{children}</p>
                break;
            case 'S8':
                if (isAction)
                    return <p className={`${styles.S8} ${styles.link} ${styles.action}`} style={getLinkStyle()}>{text}{children}</p>

                if (isLink)
                    return <a href={`${href}`} className={`${styles.S8} ${styles.link}`} style={getLinkStyle()}>{text}{children}</a>
                /*  else if (nextLink)
           console.log("TODO");*/
                else
                    return <p className={styles.S8} style={getStyle()}>{text}{children}</p>
                break;

        }
    }

    const getStyle = () => {
        return {
            fontStyle: italic ? 'italic' : 'normal',
            fontWeight: bold ? 'bold' : 'normal',
            textAlign: textAlign,
            color: color

        }
    }

    const getLinkStyle = () => {
        return {
            fontStyle: italic ? 'italic' : 'normal',
            fontWeight: bold ? 'bold' : 'normal',
            textAlign: textAlign,
            color: color,
            cursor: "pointer",

        }
    }

 


    return (
        <div className={`${styles.textContainer} ${dynamicClassName}`}>
            {getStyledText()}
        </div>
    )
}