

import React, { HTMLAttributes, useContext, useEffect, useState } from "react";
import styles from './alert.module.css'
import { Text } from "../typography/Text";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCircleExclamation, faInfoCircle, faTimes } from "@fortawesome/free-solid-svg-icons";
import { Pagination } from "../pagination/Pagination";
import { c } from "../../colors";
import { faCheckCircle } from "@fortawesome/free-regular-svg-icons";
import { ThemeContext } from "../../hooks/themeProvider";
export interface Props extends HTMLAttributes<HTMLButtonElement> {
    title: string,
    description: string,
    actionLabel?: string,
    action?(e?: any): any,
    type: "success" | "info" | "warning" | "brand" | "error",
    isVisible?: boolean,

    alertPages?: AlertPage[]

}

interface AlertPage {
    title: string,
    description: string,
    actionLabel?: string,
    action?(e?: any): any,
}

export const Alert = ({ title = "", description = "", actionLabel = "", action, type = "info", isVisible = true, alertPages = [] }: Props) => {

    const [visible, setVisible] = useState(isVisible);
    const [hoverClose, setHoverClose] = useState(false);
    const [currentPage, setCurrentPage] = useState(0);

    const { theme } = useContext(ThemeContext);

    useEffect(() => {
        setVisible(isVisible)
    }, [isVisible])

    const typeStyle = {
        "success": {
            borderColor: c({ type: "success", alpha: 100 }),
            backgroundColor: c({ type: "success", alpha: 20 }),
            icon: faCheckCircle,
            iconHover: c({ type: "success", alpha: 20 }),

        },
        "info": {
            borderColor: c({ type: "info", alpha: 100 }),
            backgroundColor: c({ type: "info", alpha: 20 }),
            icon: faInfoCircle,
            iconHover: c({ type: "info", alpha: 20 }),

        },
        "warning": {
            borderColor: c({ type: "warning", alpha: 100 }),
            backgroundColor: c({ type: "warning", alpha: 20 }),
            icon: faCircleExclamation,
            iconHover: c({ type: "warning", alpha: 20 }),

        },
        "brand": {
            borderColor: c({ type: "primary", alpha: 100,brand:theme }),
            backgroundColor: c({ type: "white" }),
            icon: faInfoCircle,
            iconHover: c({ type: "grey-20" }),
        },
        "error": {
            borderColor: c({ type: "error", alpha: 100 }),
            backgroundColor: c({ type: "error", alpha: 20 }),
            icon: faCircleExclamation,
            iconHover: c({ type: "error", alpha: 20 }),
        },
    }


    return (
        <div className={styles.alertContainer} style={{
            display: visible ? "" : "none",
            borderColor: typeStyle[type].borderColor,
            backgroundColor: typeStyle[type].backgroundColor
        }}>
            <div className={styles.iconContainer}>
                < FontAwesomeIcon
                    style={{ fontSize: "22px", marginRight: "16px", padding: "0px" }}
                    color={typeStyle[type].borderColor}
                    icon={typeStyle[type].icon}
                ></FontAwesomeIcon>


            </div>
            <div>
                {alertPages.length == 0 &&
                    <>
                        <Text type="S5" bold={true} text={title}></Text>
                        <div style={{ display: "flex", gap: "0.5rem", flexDirection: "row" }}>
                            <Text type="S7" text={description}></Text>
                            <div onClick={action} >
                                <Text isAction={true} type="S7" color={typeStyle[type].borderColor} bold text={actionLabel}></Text>
                            </div>
                        </div>
                    </>
                }
                {
                    alertPages.length > 0 &&
                    <>
                        <Text type="S5" bold={true} text={alertPages[currentPage].title}></Text>
                        <div style={{ display: "flex", gap: "0.5rem", flexDirection: "row" }}>
                            <Text type="S7" text={alertPages[currentPage].description}></Text>
                            { alertPages[currentPage].actionLabel&&
                            <div onClick={alertPages[currentPage].action} >
                                <Text isAction={true} type="S7" color={typeStyle[type].borderColor} bold text={alertPages[currentPage].actionLabel!}></Text>
                            </div>}
                        </div>
                    </>
                }

                {alertPages.length > 1 &&
                    <div className={styles.paginatorContainer}>
                        <Pagination totalPages={alertPages.length}  bgColorHover={typeStyle[type].iconHover} setPage={(e)=>setCurrentPage(e-1)} variant="small"></Pagination>
                    </div>}
            </div>
            <div onClick={() => { setVisible(false) }}
                className={styles.closeIcon}
                onMouseLeave={() => setHoverClose(false)}
                onMouseEnter={() => setHoverClose(true)}
                style={{ backgroundColor: hoverClose ? typeStyle[type].iconHover : "" }}>
                < FontAwesomeIcon
                    style={{ fontSize: "16px" }}
                    icon={faTimes}
                ></FontAwesomeIcon>
            </div>
        </div >)
}