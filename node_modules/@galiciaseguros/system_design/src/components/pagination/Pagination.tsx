import React, { FC, HTMLAttributes, useEffect, useState } from "react";
import styles from './pagination.module.css'
import { faChevronLeft } from "@fortawesome/free-solid-svg-icons";
import { faChevronRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

export interface Props extends HTMLAttributes<HTMLDivElement> {
    /** Setea el número total de páginas*/
    totalPages?: number,
    /** Setea la posición inicial*/
    position?: number,
    /** Setea la variante visual, siendo small la version collapsed*/
    variant?: 'regular' | 'small',
    /** Permite a un componente padre ejecutar una accion basada en el evento de cambio de pagina (anterior o siguiente)*/
    setPage: (pageNumber: number) => any;
    /** Color de fondo de las flechas en hover*/
    bgColorHover?:string;
}

export const Pagination:FC<Props>= ({ bgColorHover="#F4F4F4",setPage, totalPages = 10, position = 1, variant = 'regular' }: Props) => {
    const [positionState, setPositionState] = useState(position)
    const [disabledLeftArrow, setDisabledLeftArrow] = useState(position == 1);
    const [disabledRightArrow, setDisabledRightArrow] = useState(position == totalPages);
    const [isHoverLeftArrow,setIsHoverLeftArrow]=useState(false);
    const [isHoverRightArrow,setIsHoverRightArrow]=useState(false);

    const [pages, setPages] = useState(totalPages)
    const formatPosition = (position: any) => {
        let counter = 0;
        let totalPagesAux = pages
        while (totalPagesAux >= 1) {
            totalPagesAux = totalPagesAux / 10;
            counter++;
        }
        return String(position).padStart(counter, '0');
    }

    useEffect(() => {
        setPages(totalPages);
    }, [totalPages])

    useEffect(() => {
        setDisabledLeftArrow(positionState == 1);
        setDisabledRightArrow(positionState == pages)
    }, [positionState, pages])
    const prev = () => {
        setPositionState(positionState - 1);
        setPage(positionState - 1)
    }
    const next = () => {
        setPositionState(positionState + 1);
        setPage(positionState + 1)
    }
    return (
        <div className={styles.paginatorContainer}>
            <div className={styles.arrowContainer}  onMouseLeave={()=>setIsHoverLeftArrow(false)} onMouseEnter={()=>setIsHoverLeftArrow(true&&!disabledLeftArrow)} onClick={() => !disabledLeftArrow && prev()} style={{ backgroundColor:isHoverLeftArrow?bgColorHover:"",marginRight: "2px" }}>
                <FontAwesomeIcon style={{ color: disabledLeftArrow ? "#B3B3B3" : "#2B2B2B" }}
                    className={styles.arrowIcon} icon={faChevronLeft} /></div>
            {variant == 'regular' && <div style={{ userSelect: "none" }}>{formatPosition(positionState)} de {totalPages} páginas</div>}
            {variant == 'small' && <div style={{ userSelect: "none" }}>{formatPosition(positionState)} / {totalPages} </div>}

            <div className={styles.arrowContainer} onMouseLeave={()=>setIsHoverRightArrow(false)}  onMouseEnter={()=>setIsHoverRightArrow(true&&!disabledRightArrow)}  onClick={() => !disabledRightArrow && next()} style={{backgroundColor:isHoverRightArrow?bgColorHover:"", marginLeft: "2px" }}>
                <FontAwesomeIcon style={{ color: disabledRightArrow ? "#B3B3B3" : "#2B2B2B" }}
                    className={styles.arrowIcon} icon={faChevronRight} />
            </div>

        </div>
    )
}