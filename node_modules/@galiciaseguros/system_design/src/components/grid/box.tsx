

import React, { HTMLAttributes, useEffect, useState } from "react";
export interface Props extends HTMLAttributes<HTMLDivElement> {
    columns: IColumn | number,
}

interface IColumn {
    xs?: number,
    sm?: number,
    md?: number,
    lg?: number,
    xl?: number,
    xxl?: number
}


export const Box = ({ children, columns = 1,style }: Props) => {

    const [windowWidth, setWindowWidth] = useState(0);
    let resizeWindow = () => {
        setWindowWidth(window.innerWidth);
    };

    const colTypes = ['xs',
        'sm',
        'md',
        'lg',
        'xl',
        'xxl']

    useEffect(() => {
        resizeWindow();
        window.addEventListener("resize", resizeWindow);
        return () => window.removeEventListener("resize", resizeWindow);
    }, []);



    const getColumns = (width: number) => {
        if (typeof (columns) == "number") {
            return columns
        }
        switch (true) {
            // If score is 90 or greater
            case width < 359:
                return columns.xs? columns.xs : getNextDefinedColumn("sm");
                break;
            case width < 767:
                return columns.sm ? columns.sm : getNextDefinedColumn("md");
                break;
              case width < 1023:
                return columns.md ? columns.md : getNextDefinedColumn("md");
                break;
            case width < 1279:
                return columns.lg ? columns.lg : getNextDefinedColumn("md");
                break;
            case width < 1500:
                return columns.xl ? columns.xl : getNextDefinedColumn("md");
                break;
            case width > 1500:
                return columns.xxl ? columns.xxl: getNextDefinedColumn("md");
                break;
            default:
                return 1
        }
    }

    const getNextDefinedColumn=(col:string)=>{
        const indexStart=colTypes.findIndex((c)=>c==col);
        for(let i=indexStart;i<colTypes.length;i++){
            if(typeof(columns)!="number" && columns[colTypes[i] as keyof typeof columns]){
                return columns[colTypes[i] as keyof typeof columns]
            }
        }
        for(let j=indexStart;j>0;j--){
            if(typeof(columns)!="number" && columns[colTypes[j] as keyof typeof columns]){
                return columns[colTypes[j] as keyof typeof columns]
            }
        }
        return 

    }

    return (
        <div style={Object.assign({ gridColumn: `span ${getColumns(windowWidth)}`}, style)}>
            {children}
        </div>
    )
}