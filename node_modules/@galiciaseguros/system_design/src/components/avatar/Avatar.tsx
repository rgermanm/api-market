import {  faPencil } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { FC, HTMLAttributes, useContext, useEffect, useState } from "react";
import { c } from "../../colors";
import { ThemeContext } from "../../hooks/themeProvider";
import styles from './avatar.module.css'
import { Badge } from "./Badge";
import { Notification } from "./Notification";


export interface AvatarProps extends HTMLAttributes<HTMLDivElement> {

    /**Tama√±o del Avatar**/
    size?: 'XXS' | 'XS' | 'SM' | 'MD' | 'LG' | 'XL'
    /**Color de fondo**/
    backgroundColor?: string,
    /**Forma**/
    variant?: 'square' | 'circle',
    /**Tipo de contenido**/
    contentType?: 'text' | 'image' | 'icon',
    /**Contenido del Avatar */
    content?: any,
    /**Indica si debe mostrarse notificacion en el lateral inferior derecho */
    notification?: boolean,
    /**Color de la notificacion */
    notificationColor?: string,
    /**Indica si debe mostrarse el badge */
    badge?: boolean,
    /**Color del badge */
    badgeColor?: string,
    edit?():any
}

export const Avatar: FC<AvatarProps> = ({edit, notification = false, content = 'GL', variant = 'square', size = "LG", backgroundColor, notificationColor, badge = false, badgeColor }: AvatarProps) => {

    const [activeHover, setActiveHover] = useState(false);
    const [bgColor,setBgColor]=useState(backgroundColor)
    const {theme}=useContext(ThemeContext)
    useEffect(()=>{
        if(!backgroundColor){
            setBgColor(c({type:"primary",brand:theme}))
        }
    },[])

    const containerProportions = {
        'XXS': 24,
        'XS': 32,
        'SM': 40,
        'MD': 48,
        'LG': 64,
        'XL': 88
    }

    const radius = {
        'square': size == 'XXS' ? '4px' : '8px',
        'circle': '50%'
    }

    const notificationPosition = {
        'XXS': 3,
        'XS': 3,
        'SM': 4,
        'MD': 5,
        'LG': 7,
        'XL': 10
    }

    const badgePosition = {
        'XXS': 3,
        'XS': 3,
        'SM': 4,
        'MD': 5,
        'LG': 7,
        'XL': 10
    }


    return (
        <div onMouseEnter={() => { setActiveHover(true) }} onMouseLeave={() => { setActiveHover(false) }} style={{ position: "relative", backgroundColor: bgColor, width: `${containerProportions[size]}px`, height: `${containerProportions[size]}px`, borderRadius: radius[variant] }} className={styles.avatarContainer}>
            <div style={{ width: `${containerProportions[size] / 2}px`, height: `${containerProportions[size] / 2}px` }} className={styles.avatarIcon}>
                <p style={{ fontSize: `${containerProportions[size] / 2.5}px` }}>{content}</p>


            </div>


            {activeHover &&
                <div onClick={edit} className={styles.editContainer} style={{ borderRadius: "100px", width: `${containerProportions[size] / 1.6}px`, height: `${containerProportions[size] / 1.6}px`, position: "absolute", backgroundColor: c({ type: "grey-80" }) }}>
                    <FontAwesomeIcon color={"white"} icon={faPencil} fontSize={`${(containerProportions[size] / 1.6)*0.5}px`}/>
                </div>
            }
            {notification && <div
                style={{
                    position: 'absolute',
                    bottom: variant == "square" ? `-${notificationPosition[size]}px` : "0px",
                    right: variant == "square" ? `-${notificationPosition[size]}px` : "0px",
                }}
            >
                <Notification
                    backgroundColor={notificationColor}
                    size={size}></Notification>
            </div>
            }
            {badge && <div
                style={{
                    position: 'absolute',
                    bottom: variant == "square" ? `-${badgePosition[size]}px` : "0px",
                    right: variant == "square" ? `-${badgePosition[size]}px` : "0px",
                }}
            >
                <Badge
                    backgroundColor={badgeColor}
                    size={size}></Badge>
            </div>
            }
        </div>
    )
}