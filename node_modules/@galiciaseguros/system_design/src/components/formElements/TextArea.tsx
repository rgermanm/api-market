import React, { HTMLAttributes, useState } from "react";
import styles from './textArea.module.css'
import { HelperText } from "./HelperText";

interface Props extends HTMLAttributes<HTMLTextAreaElement> {
    sizeVariant: 'regular' | 'large';
    border?: 'bottom' | 'round' | 'shadow';
    hint?: string;
    placeHolder?: string;
    hintPosition?: 'left' | 'right';
    format?: (val: any) => any;
    disabled?: boolean

}

export const TextArea = ({ format = (v => v), disabled = false, border = "bottom", placeHolder = "", hint = "",hintPosition="left", sizeVariant = "regular", ...props }: Props) => {
    const [isFocused, setIsFocused] = useState(false);
    const [value, setValue] = useState("");




    const variantBorder = {
        bottom: {
            focused: styles.textAreaBottomFocused,
            blur: styles.textAreaBottom,
            labelOut: styles.transitionLabelOutBottom,
            labelIn: styles.transitionLabelInBottom,
            disabled: styles.textAreaBottomDisabled
        },
        round: {
            focused: styles.textAreaRoundFocused,
            blur: styles.textAreaRound,
            labelOut: styles.transitionLabelOutRound,
            labelIn: styles.transitionLabelInRound,
            disabled: styles.textAreaRoundDisabled
        },
        shadow: {
            focused: styles.textAreaShadowFocused,
            blur: styles.textAreaShadow,
            labelOut: styles.transitionLabelOutShadow,
            labelIn: styles.transitionLabelInShadow,
            disabled: styles.textAreaShadowDisabled
        },
    }


    const getInnerContainerStyle = () => {
        if (disabled) {
            return variantBorder[border].disabled
        }
        else if (isFocused) {
            return variantBorder[border].focused
        }
        else {
            return variantBorder[border].blur
        }
    }

    return (
        <div className={styles.textAreaContainer}>
            <div style={{ position: "relative" }} className={getInnerContainerStyle()}>
                <label style={{ color: disabled ? "#6A6A6A" : "black" }} className={isFocused || value ? variantBorder[border].labelOut : variantBorder[border].labelIn}>Label</label>
                <div style={{ display: "flex", flexDirection: "row", alignItems: "baseline" }}>
                    <textarea
                        value={value}
                        placeholder={isFocused ? placeHolder : ""}
                        style={{ minWidth: "100%", outline: "none", borderWidth: 0 }}
                        onFocus={() => setIsFocused(true)}
                        onBlur={() => setIsFocused(false)}
                        onChange={(e) => { setValue(format(e.target.value)) }}
                        disabled={disabled}
                        {...props} >
                    </textarea>

                </div>

            </div>

            {<HelperText className={styles.hint}  style={{float:hintPosition}} children={hint}></HelperText>}
        </div>

    )
}