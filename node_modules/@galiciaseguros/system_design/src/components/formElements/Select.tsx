import React, { HTMLAttributes, useContext, useEffect, useState } from "react";
import styles from './select.module.css'
import { HelperText } from "./HelperText";
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faCheckCircle } from '@fortawesome/free-regular-svg-icons'
import { faChevronDown, faChevronUp, faCircleExclamation } from "@fortawesome/free-solid-svg-icons";
import { c } from "../../colors";
import { ThemeContext } from "../../hooks/themeProvider";
import { Dropdown } from "../dropdown/Dropdown";
import useComponentVisible from "../../hooks/useComponentVisible";

export interface Props extends HTMLAttributes<HTMLInputElement> {
    sizeVariant: 'regular' | 'large';
    label: string;
    border?: 'bottom' | 'round' | 'shadow';
    onChange?(e?: any): any,

    isValid?: boolean;
    error?: string;
    helperText?: string;
    placeHolder?: string;
    prefix?: string;
    sufix?: string;
    format?: (val: any) => any;
    disabled?: boolean,
    register?: any;
    name?: string,
    controller?: any
}

export const Select = ({ controller, name = "field", register, format = (v => v), disabled = false, border = "bottom", sufix = "", prefix = "", placeHolder = "", helperText = "", sizeVariant = "regular", isValid, error = "", label = "Label", onChange = (() => { }), ...props }: Props) => {
    const [isFocused, setIsFocused] = useState(false);
    const [searchValue, setSearchValue] = useState("");
    const { theme } = useContext(ThemeContext)
    const [filterdOptions, setfilteredOptions] = useState([{ label: "", value: "" }]);
    const { ref, isComponentVisible,setIsComponentVisible } = useComponentVisible(false);


    const getVariant = () => {
        if (error != "") {
            return "error";
        }
        if (isValid) {
            return "success"
        }
        else {
            return "info"
        }

    }

    const variantColor = {
        error: "#C51111",
        success: "#258825",
        info: c({ type: "grey-60", brand: theme })
    }

    const variantBorder = {
        bottom: {
            focused: styles.textInputBottomFocused,
            blur: styles.textInputBottom,
            labelOut: styles.transitionLabelOutBottom,
            labelIn: styles.transitionLabelInBottom,
            disabled: styles.textInputBottomDisabled
        },
        round: {
            focused: styles.textInputRoundFocused,
            blur: styles.textInputRound,
            labelOut: styles.transitionLabelOutRound,
            labelIn: styles.transitionLabelInRound,
            disabled: styles.textInputRoundDisabled
        },
        shadow: {
            focused: styles.textInputShadowFocused,
            blur: styles.textInputShadow,
            labelOut: styles.transitionLabelOutShadow,
            labelIn: styles.transitionLabelInShadow,
            disabled: styles.textInputShadowDisabled
        },
    }


    const getInnerContainerStyle = () => {
        if (disabled) {
            return variantBorder[border].disabled
        }
        else if (isFocused) {
            return variantBorder[border].focused
        }
        else {
            return variantBorder[border].blur
        }
    }
    const options = [{
        label: "Moto",
        value: "Moto"
    }, {
        label: "Auto",
        value: "Auto"
    },
    {
        label: "Camioneta",
        value: "Camioneta"
    }]

    useEffect(() => {
        setfilteredOptions(options.filter((x) => (x.label.toLowerCase().includes(searchValue.toLowerCase()))))
    }, [searchValue])

    useEffect(()=>{
        console.log(options.findIndex((o)=>searchValue.toLowerCase()==o.label.toLowerCase()))
        if(options.findIndex((o)=>searchValue.toLowerCase()==o.label.toLowerCase())==-1){
            setSearchValue("");
        }
    },[isComponentVisible]);
    

    return (
        <div ref={ref} className={styles.textInputContainer}>
            <div style={{ position: "relative", borderColor: variantColor[getVariant()] }} className={getInnerContainerStyle()}>
                <p style={{ marginBlock: 0, color: disabled ? "#6A6A6A" : "#6A6A6A" }} className={isFocused || searchValue ? variantBorder[border].labelOut : variantBorder[border].labelIn}>{label}</p>
                <div style={{ display: "flex", width:"100%",flexDirection: "row", alignItems: "baseline" }}>
                    {(prefix != "" && (isFocused || searchValue != "")) && <p className={styles.prefix}>{prefix}</p>}
                    {register && <input
                        {...register(name, controller)}
                        placeholder={isFocused ? placeHolder : ""}
                        style={{ width: "100%", fontSize: "18px", lineHeight: "22px" }}
                        onFocus={() => {setIsFocused(true);setIsComponentVisible(true)}}
                        onBlur={() => setIsFocused(false)}
                        disabled={disabled}
                        name={name}
                        onChange={e => {
                            register(name).onChange(e);
                            setSearchValue(e.target.value);
                        }}
                        {...props} >
                    </input>}
                    {!register && <input
                        value={searchValue}
                        placeholder={isFocused ? placeHolder : ""}
                        style={{ width: "100%" }}
                        onFocus={() => {setIsFocused(true);setIsComponentVisible(true)}}
                        onBlur={() => setIsFocused(false)}
                        onChange={(e) => { setSearchValue(format(e.target.value)) }}
                        disabled={disabled}
                        {...props} >
                    </input>}

                    {(sufix != "" && (isFocused || searchValue != "")) && <p className={styles.sufix}>{sufix}</p>}

                    {(isValid && error == "") && <FontAwesomeIcon color={"#258825"} icon={faCheckCircle} />}
                    {error != "" && <FontAwesomeIcon color={"#C51111"} icon={faCircleExclamation} />}
                    <div className={styles.chevron} style={{borderColor:isFocused?c({type:"primary",brand:theme}):c({type:"grey-60",brand:theme})}}>
                        {isFocused ? <FontAwesomeIcon color={"black"} icon={faChevronUp}></FontAwesomeIcon> : <FontAwesomeIcon color={"black"} icon={faChevronDown} />}
                    </div>
                </div>

            </div>
            <div style={{ height: "20px" }}>
                <div style={{ position: "absolute",whiteSpace:"nowrap", width: "40ch",marginTop:"10px" }}>  {isComponentVisible&& <Dropdown setSeleted={(e)=>{setSearchValue(e),setIsComponentVisible(false)}} open={isComponentVisible} options={filterdOptions}></Dropdown>}</div>
                <HelperText variant={getVariant()} children={error != "" ? error : helperText}></HelperText>
            </div>

        </div>

    )
}