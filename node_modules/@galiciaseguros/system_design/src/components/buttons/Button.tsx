import { IconDefinition } from "@fortawesome/free-regular-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React, { HTMLAttributes, useContext, useEffect, useState } from "react";
import { Text } from "../typography/Text";
import styles from './button.module.css';
import { ThemeContext } from "../../hooks/themeProvider";
import { c } from "../../colors";
import { BrandType, TextType } from "../../models/types";

export interface Props extends HTMLAttributes<HTMLButtonElement> {
    variant?: 'primary' | 'secondary' | 'tertiary';
    size?: 'normal' | 'small' | 'full-width';
    label: string;
    rightIcon?: IconDefinition,
    leftIcon?: IconDefinition,
    disabled?: boolean,
    onClick?: (val: any) => any;

}

interface ITextConfig {
    type?: TextType,
    bold: boolean
}
interface ITextConfigs {
    [key: string]: ITextConfig
}

interface IColorConfigs {
    [key: string]: IColorConfig
}

interface IColorConfig {
    [key: string]: Object
}

export const Button = ({ onClick, label = "Button", rightIcon, leftIcon, size = "normal", variant = "primary", disabled = false, ...props }: Props) => {


    const { theme } = useContext(ThemeContext);

    const brandTheme: BrandType = theme;

    const [state, setState] = useState(disabled ? "disabled" : "base");

    useEffect(() => {
        if (disabled) {
            setState("disabled")
        }
        else {
            setState("base");
        }
    }, [disabled])

    const sizeVariant = {
        "normal": styles.buttonNormal,
        "small": styles.buttonSmall,
        "full-width": styles.buttonFullWidth
    }


    const colorVariant: IColorConfigs = {

        "primary": {
            base: {
                backgroundColor: c({ type: "primary", brand: brandTheme }),
                color: "white",
                border: 0

            },
            hover: {
                backgroundColor: c({ type: "dark", brand: brandTheme }),
                color: "white",
                border: 0
            },
            disabled: {
                backgroundColor: c({ type: "grey-60", brand: brandTheme }),
                color: "white",
                border: 0
            }
        },

        "secondary": {
            base: {
                color: c({ type: "primary", brand: brandTheme }),
                borderWidth: 1,
                borderStyle:"solid",
                borderColor:c({ type: "primary", brand: brandTheme }),
                backgroundColor:c({ type: "white"}),
            },
            hover: {
                color: c({ type: "dark", brand: brandTheme }),
                borderWidth: 1,
                borderStyle:"solid",
                borderColor:c({ type: "dark", brand: brandTheme }),
                backgroundColor:c({ type: "light",brand:brandTheme}),
            },
            disabled: {
                color: c({ type: "grey-60", brand: brandTheme }),
                borderWidth: 1,
                borderStyle:"solid",
                backgroundColor:c({ type: "white"}),
                borderColor: c({ type: "grey-60", brand: brandTheme }),
            }
        },
        "tertiary": {
            base: {
                backgroundColor: c({ type: "white", brand: brandTheme }),
                color: c({ type: "primary", brand: brandTheme }),
                border: 0

            },
            hover: {
                backgroundColor: c({ type: "grey-20" }),
                color: c({ type: "dark", brand: brandTheme }),
                border: 0
            },
            disabled: {
                backgroundColor: c({ type: "white", brand: brandTheme }),
                color: c({ type: "grey-60", brand: brandTheme }),
                border: 0
            }
        },
    }

    const textConfig: ITextConfigs = {
        "normal": {
            type: "S5",
            bold: true
        },
        "small": {
            type: "S7",
            bold: true
        },
        "full-width": {
            type: "S5",
            bold: true
        }
    }

    return (
        <div className={styles.securityArea}>
            <button style={colorVariant[variant][state]} onClick={onClick} onMouseLeave={()=>{setState(disabled?"disabled":"base")}}onMouseEnter={()=>{setState(disabled?"disabled":"hover")}} type="button" disabled={disabled} className={`${sizeVariant[size]} `} {...props}>
                {leftIcon && <FontAwesomeIcon className={styles.leftIcon} icon={leftIcon} />}
                <Text bold={textConfig[size].bold} type={textConfig[size].type} text={label}></Text>
                {rightIcon && <FontAwesomeIcon className={styles.rightIcon} icon={rightIcon} />}
            </button>

        </div>
    )
}