import React, { HTMLAttributes } from "react";
import { TableCell } from "./TableCell";
import styles from './table.module.css'
import { TableHeader } from "./TableHeader";
import { TableFooter } from "./TableFooter";
import { useEffect } from "react";
import { useState } from "react";

interface Props extends HTMLAttributes<HTMLTableElement> {


    data?: any,
    width?: number,
    state?: 'danger' | 'success' | 'warning' | 'disabled' | 'info'
    tableHeaders?: Array<IHeader>
    paginated?:boolean
}
interface IHeader {
    label: string,
    key: string,
    type: 'text' | 'number' | 'state',
    sortable?: boolean,
    sortState?: 'ASC' | 'DESC' | 'BASE'
}

export const Table = ({ data = "DATA", tableHeaders,paginated=false }: Props) => {


    const [filteredResult, setFilteredResult] = useState(new Array());
    const [pageNumber, setPageNumber] = useState(1);
    const [resultsPerPage, setResultsPerPage] = useState(5);
    const [columns, setColumns] = useState(new Array<IHeader>);
    const [dataTable, setDataTable] = useState(new Array<Object>)
    const [total, setTotal] = useState(0);

    useEffect(() => {
        setDataTable(data);
        if (tableHeaders) {
            setColumns(tableHeaders)
        }
        else {
            let tempColumns = new Array<IHeader>;
            Object.keys(data[0]).forEach((key) =>
                tempColumns.push({
                    label: key.charAt(0).toUpperCase() + key.slice(1).toLowerCase(),
                    key: key,
                    type: "text",
                    sortable: false
                })
            );
            setColumns(tempColumns);
        }
        //temporary code for unused value ts error
    }, [data])
    {/*  const columnsConst: Array<IHeader> = [
        {
            label: "Name",
            key: "name",
            type: "text",
            sortable: true

        },
        {
            label: "Age",
            type: "text",
            key: "age",
            sortable: true,
        },
        {
            label: "DNI",
            type: "text",
            key: "doc",
            sortable: true

        },
        {
            label: "Registered",
            type: "state",
            key: "registered",
            sortable: false,

        },
        {
            label: "key",
            type: "text",
            key: "key",
            sortable: true
        }
    ]

  let dataTableTest = [
        {
            name: "Juan",
            age: 12,
            doc: "11.443.221",
            key: 1,
            registered:{
                label:'Eliminado',
                state:'danger'
            }
        },
        {
            name: "Maria",
            age: 25,
            doc: "34.443.221",
            key: 2,
            registered:{
                label:'Activo',
                state:'success'
            }
        },
        {
            name: "Renata",
            age: 55,
            doc: "5.443.221",
            key: 3,
            registered:{
                label:'Inactivo',
                state:'disabled'
            }
        },
        {
            name: "Ivan",
            age: 65,
            doc: "4.443.221",
            key: 4,
            registered:{
                label:'Info',
                state:'info'
            }
        },
        {
            name: "Carlos",
            age: 55,
            doc: "9.443.221",
            key: 5,
            registered:{
                label:'Warning',
                state:'warning'
            }
        },
        {
            name: "Juan",
            age: 12,
            doc: "11.443.221",
            key: 6
        },
        {
            name: "Maria",
            age: 25,
            doc: "34.443.221",
            key: 7
        },
        {
            name: "Renata",
            age: 55,
            doc: "5.443.221",
            key: 8
        },
        {
            name: "Ivan",
            age: 65,
            doc: "4.443.221",
            key: 9
        },
        {
            name: "Carlos",
            age: 55,
            doc: "9.443.221",
            key: 10
        },
        {
            name: "Juan",
            age: 12,
            doc: "11.443.221",
            key: 11
        },
        {
            name: "Maria",
            age: 25,
            doc: "34.443.221",
            key: 12
        },
        {
            name: "Renata",
            age: 55,
            doc: "5.443.221",
            key: 13
        },
        {
            name: "Ivan",
            age: 65,
            doc: "4.443.221",
            key: 14
        },
        {
            name: "Carlos",
            age: 55,
            doc: "9.443.221",
            key: 15
        },
        {
            name: "Juan",
            age: 12,
            doc: "11.443.221",
            key: 16
        },
        {
            name: "Maria",
            age: 25,
            doc: "34.443.221",
            key: 17
        },
        {
            name: "Renata",
            age: 55,
            doc: "5.443.221",
            key: 18
        },
        {
            name: "Ivan",
            age: 65,
            doc: "4.443.221",
            key: 19
        },
        {
            name: "Carlos",
            age: 55,
            doc: "9.443.221",
            key: 20
        },
        {
            name: "Juan",
            age: 12,
            doc: "11.443.221",
            key: 21
        },
        {
            name: "Maria",
            age: 25,
            doc: "34.443.221",
            key: 22
        },
        {
            name: "Renata",
            age: 55,
            doc: "5.443.221",
            key: 23
        },
        {
            name: "Ivan",
            age: 65,
            doc: "4.443.221",
            key: 24
        },
        {
            name: "Carlos",
            age: 55,
            doc: "9.443.221",
            key: 25
        },
    ]*/}




    useEffect(() => {
        setTotal(dataTable.length);
        let filtereAux = [...dataTable];
        if (pageNumber == 1) {
            setFilteredResult(filtereAux.slice(0, resultsPerPage))
        }
        else
            setFilteredResult(filtereAux.slice(resultsPerPage * (pageNumber - 1), (resultsPerPage * pageNumber - 1) + resultsPerPage))
    }, [dataTable])

    useEffect(() => {
        let filtereAux = [...dataTable];

        if (pageNumber == 1) {
            setFilteredResult(filtereAux.slice(0, resultsPerPage))
        }
        else
            setFilteredResult(filtereAux.slice(resultsPerPage * (pageNumber - 1), resultsPerPage * (pageNumber - 1) + resultsPerPage))

    }, [resultsPerPage, pageNumber])



    const sort = (key: string, order: "ASC" | "DESC") => {

        let filteredAux = [...dataTable];
        let headers = [...columns];
        for (let i = 0; i < headers.length; i++) {
            if (headers[i].key != key) {
                headers[i].sortState = 'BASE';
            }
            else {
                headers[i].sortState = order;
            }
        }
        setColumns(headers);
        if (order == "DESC") {
            filteredAux = filteredAux.sort((a: any, b: any) => (a[key] < b[key]) ? 1 : ((b[key] < a[key]) ? -1 : 0))
            setFilteredResult(filteredAux.slice(resultsPerPage * (pageNumber - 1), resultsPerPage * (pageNumber - 1) + resultsPerPage))
        }
        else {
            filteredAux = filteredAux.sort((a: any, b: any) => (a[key] > b[key]) ? 1 : ((b[key] > a[key]) ? -1 : 0))
            setFilteredResult(filteredAux.slice(resultsPerPage * (pageNumber - 1), resultsPerPage * (pageNumber - 1) + resultsPerPage))
        }

    }
    return (
        <div className={styles.tableContainer}>
            <div className={styles.tableContentContainer}>
                {columns.map((c) =>
                    <div>
                        <div className={styles.tableHeaderContainer}>
                            <TableHeader sortState={c.sortState} columnKey={c.key} sort={sort} sortable={c.sortable ? true : false} data={c.label}></TableHeader>
                        </div>
                        {filteredResult.map((r: any) =>
                            <div className={styles.tableCellContainer}>

                                <TableCell dataType={c.type} data={r[c.key]}></TableCell>
                            </div>
                        )}
                    </div>

                )}
            </div>
            { paginated&&<TableFooter setPageNumber={setPageNumber} setResultPerPage={setResultsPerPage} total={total}>
            </TableFooter>}
        </div>
    )
}